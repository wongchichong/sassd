{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { execSync } from 'child_process'\r\nimport { unlinkSync } from 'fs'\r\nimport { resolve, extname } from 'path'\r\nimport glob from 'glob'\r\nimport yargs from 'yargs'\r\nimport watchman from 'fb-watchman'\r\nimport chalk from 'chalk'\r\n\r\ninterface Args {\r\n    folder: string\r\n    recursive: boolean\r\n    watch: boolean\r\n    namedExports: boolean\r\n    asIs: boolean\r\n    camelCase: boolean\r\n    camelCaseOnly: boolean\r\n    dashes: boolean\r\n    dashesOnly: boolean\r\n    stdin: boolean\r\n    indented: boolean\r\n    loadPath: string[]\r\n    style: 'expanded' | 'compressed'\r\n    noCharset: boolean\r\n    errorCss: boolean\r\n    update: boolean\r\n    noSourceMap: boolean\r\n    sourceMapUrls: 'relative' | 'absolute'\r\n    embedSources: boolean\r\n    embedSourceMap: boolean\r\n    poll: boolean\r\n    stopOnError: boolean\r\n    noUnicode: boolean\r\n    quiet: boolean\r\n    quietDeps: boolean\r\n    fatalDeprecation: string[]\r\n    trace: boolean\r\n    deleteCss: boolean\r\n    \"delete-css\": boolean\r\n}\r\n\r\nconst sass = chalk.green('sass')\r\nconst tcm = chalk.green('tcm')\r\n\r\nfunction compileSassFiles(args: Args) {\r\n    const { recursive, watch, namedExports, asIs, camelCase, camelCaseOnly, dashes, dashesOnly, loadPath, noCharset, errorCss,\r\n        //update, style, stdin, indented, poll, quiet, trace,\r\n        noSourceMap, sourceMapUrls, embedSources, embedSourceMap, stopOnError, noUnicode, quietDeps, fatalDeprecation, deleteCss, \"delete-css\": ds,\r\n        //@ts-ignore\r\n        _: folder,\r\n        ...a } = args\r\n\r\n    const sassFiles = findSassFiles(folder, recursive)\r\n    console.log(\"compileSassFiles\", folder, console.log(JSON.stringify(args)))\r\n    // return\r\n\r\n    sassFiles.forEach((sassFile) => {\r\n        const cssFile = convertSassToCss(sassFile)\r\n\r\n        try {\r\n            compileSass(sassFile, cssFile, a\r\n                // {\r\n                // stdin,\r\n                // indented,\r\n                // loadPath,\r\n                // style,\r\n                // noCharset,\r\n                // errorCss,\r\n                // update,\r\n                // noSourceMap,\r\n                // sourceMapUrls,\r\n                // embedSources,\r\n                // embedSourceMap,\r\n                // poll,\r\n                // stopOnError,\r\n                // noUnicode,\r\n                // quiet,\r\n                // quietDeps,\r\n                // fatalDeprecation,\r\n                // trace,\r\n                // }\r\n            )\r\n            generateTypedCssModules(cssFile, {\r\n                namedExports,\r\n                asIs,\r\n                camelCase,\r\n                camelCaseOnly,\r\n                dashes,\r\n                dashesOnly,\r\n            }, deleteCss)\r\n        } catch (error) {\r\n            console.error(`Error compiling ${sass} file ${sassFile}:`, error)\r\n        } finally {\r\n            if (deleteCss)\r\n                deleteFile(cssFile)\r\n        }\r\n    })\r\n\r\n    if (watch) {\r\n        const client = new watchman.Client()\r\n        const watchDir = resolve(process.cwd(), folder)\r\n\r\n        client.command(['watch-project', watchDir], (error, resp) => {\r\n            if (error) {\r\n                console.error('Error setting up watchman:', error)\r\n                return\r\n            }\r\n\r\n            if ('warning' in resp) {\r\n                console.log('Warning from watchman:', resp.warning)\r\n            }\r\n\r\n            const { watch: watchPath } = resp\r\n            const subscription = {\r\n                expression: ['allof', ['match', '*.module.scss']],\r\n                fields: ['name'],\r\n            }\r\n\r\n            client.command(['subscribe', watchPath, 'sass-watch', subscription], (error, resp) => {\r\n                if (error) {\r\n                    console.error('Error subscribing to watchman:', error)\r\n                    return\r\n                }\r\n\r\n                console.log('Watching for changes in Sass files...')\r\n            })\r\n\r\n            client.on('subscription', (resp) => {\r\n                if (resp.subscription !== 'sass-watch') {\r\n                    return\r\n                }\r\n\r\n                resp.files.forEach((file) => {\r\n                    const sassFile = resolve(watchPath, file.name)\r\n                    const cssFile = convertSassToCss(sassFile)\r\n\r\n                    try {\r\n                        compileSass(sassFile, cssFile, a\r\n                            // {\r\n                            //     stdin,\r\n                            //     indented,\r\n                            //     loadPath,\r\n                            //     style,\r\n                            //     noCharset,\r\n                            //     errorCss,\r\n                            //     update,\r\n                            //     noSourceMap,\r\n                            //     sourceMapUrls,\r\n                            //     embedSources,\r\n                            //     embedSourceMap,\r\n                            //     poll,\r\n                            //     stopOnError,\r\n                            //     noUnicode,\r\n                            //     quiet,\r\n                            //     quietDeps,\r\n                            //     fatalDeprecation,\r\n                            //     trace,\r\n                            // }\r\n                        )\r\n                        generateTypedCssModules(cssFile, {\r\n                            namedExports,\r\n                            asIs,\r\n                            camelCase,\r\n                            camelCaseOnly,\r\n                            dashes,\r\n                            dashesOnly,\r\n                        }, deleteCss)\r\n                    } catch (error) {\r\n                        console.error(`Error compiling ${sass} file ${sassFile}:`, error)\r\n                    } finally {\r\n                        if (deleteCss)\r\n                            deleteFile(cssFile)\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nfunction findSassFiles(folder: string, recursive: boolean): string[] {\r\n    const globPattern = recursive ? `${folder}/**/*.module.{scss,sass}` : `${folder}/*.module.{scss,sass}`\r\n    return glob.sync(globPattern)\r\n}\r\n\r\nfunction convertSassToCss(sassFile: string): string {\r\n    const cssFile = sassFile.replace(/\\.module\\.(scss|sass)$/, '.module.css')\r\n    return cssFile\r\n}\r\n\r\nfunction checkSass() {\r\n    const sassCommand = `sass --version`\r\n    let res: string\r\n    try {\r\n        res = execSync(sassCommand, { stdio: 'inherit' })\r\n        return true\r\n    }\r\n    catch (ex) {\r\n        // console.log(ex)\r\n        console.error(chalk.red('Sass execution error'))\r\n        console.error(chalk.red('Please install sass globally'))\r\n        return false\r\n    }\r\n}\r\n\r\nfunction checkTcm() {\r\n    const sassCommand = `tcm --version`\r\n    let res: string\r\n    try {\r\n        res = execSync(sassCommand, { stdio: 'inherit' })\r\n        return true\r\n    }\r\n    catch (ex) {\r\n        // console.log(ex)\r\n        console.error(chalk.red('typed-css-modules execution error'))\r\n        console.error(chalk.red('Please install typed-css-modules globally'))\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nfunction compileSass(sassFile: string, cssFile: string, sassOptions: Record<string, unknown>) {\r\n    const sassCommand = `sass ${sassFile} ${cssFile} ${formatSassOptions(sassOptions)}`\r\n    console.log(`${sass} ${sassFile} ${cssFile} ${formatSassOptions(sassOptions)}`)\r\n\r\n    execSync(sassCommand, { stdio: 'inherit' })\r\n}\r\n\r\nfunction formatSassOptions(sassOptions: Record<string, unknown>): string {\r\n    const options = []\r\n\r\n    for (const [key, value] of Object.entries(sassOptions)) {\r\n        if (typeof value === 'boolean' && value) {\r\n            options.push(`--${key}`)\r\n            // } else if (value === false) {\r\n            //     options.push(`--no-${key}`)\r\n        } else if (Array.isArray(value)) {\r\n            value.forEach((val) => {\r\n                options.push(`--${key} ${val}`)\r\n            })\r\n        }\r\n        // else {\r\n        //     options.push(`--${key} ${value}`)\r\n        // }\r\n    }\r\n\r\n    return options.join(' ')\r\n}\r\n\r\nfunction generateTypedCssModules(cssFile: string, cssModulesOptions: Record<string, unknown>, deleteCss: boolean) {\r\n    const typedCssModulesCommand = `tcm ${cssFile} ${formatTypedCssModulesOptions(cssModulesOptions)}`\r\n    console.log(`${tcm} ${cssFile} ${formatTypedCssModulesOptions(cssModulesOptions)}`, !deleteCss ? '\\n' : '')\r\n    execSync(typedCssModulesCommand, { stdio: 'inherit' })\r\n}\r\n\r\nfunction formatTypedCssModulesOptions(cssModulesOptions: Record<string, unknown>): string {\r\n    const options: string[] = []\r\n\r\n    for (const [key, value] of Object.entries(cssModulesOptions)) {\r\n        if (typeof value === 'boolean' && value) {\r\n            options.push(`--${key}`)\r\n        }\r\n        // else if (value === false) {\r\n        //     options.push(`--no-${key}`)\r\n        // }\r\n    }\r\n\r\n    return options.join(' ')\r\n}\r\n\r\nfunction deleteFile(file: string) {\r\n    console.log(chalk.green(\"Deleting...\"), file, '\\n')\r\n    unlinkSync(file)\r\n    unlinkSync(file + '.map')\r\n}\r\n\r\nconst argv = yargs\r\n    .strict(false)\r\n    .positional('folder', {\r\n        describe: 'Folder containing Sass files',\r\n        type: 'string',\r\n        demandOption: true,\r\n    })\r\n    .option('recursive', {\r\n        alias: 'r',\r\n        describe: 'Search for Sass files recursively',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('watch', {\r\n        alias: 'w',\r\n        describe: 'Enable watch mode',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('namedExports', {\r\n        alias: 'e',\r\n        describe: 'Export types as named exports',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('asIs', {\r\n        describe: 'Export class names as is',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('camelCase', {\r\n        alias: 'c',\r\n        describe: 'Camelize class names',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('camelCaseOnly', {\r\n        alias: 'cc',\r\n        describe: 'Camelize class names and remove original class names from locals',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('dashes', {\r\n        alias: 'd',\r\n        describe: 'Camelize only dashes in class names',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('dashesOnly', {\r\n        alias: 'do',\r\n        describe: 'Camelize only dashes in class names and remove original class names from locals',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('stdin', {\r\n        describe: 'Read input file from standard input',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('indented', {\r\n        describe: 'Parse input file as indented syntax',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('loadPath', {\r\n        alias: 'l',\r\n        describe: 'Additional load paths for Sass to look for stylesheets',\r\n        type: 'array',\r\n        default: [],\r\n    })\r\n    .option('style', {\r\n        alias: 's',\r\n        describe: 'Output style of the resulting CSS',\r\n        choices: ['expanded', 'compressed'],\r\n        default: 'expanded',\r\n    })\r\n    .option('noCharset', {\r\n        describe: 'Do not emit a @charset declaration or a UTF-8 byte-order mark',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('errorCss', {\r\n        describe: 'Emit a CSS file when an error occurs during compilation',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('deleteCss', {\r\n        describe: 'Delete intermediate a CSS during processing',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('update', {\r\n        describe: 'Only compile stylesheets with modified dependencies',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('noSourceMap', {\r\n        describe: 'Do not generate any source maps',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('sourceMapUrls', {\r\n        describe: 'Type of URLs in source maps',\r\n        choices: ['relative', 'absolute'],\r\n        default: 'relative',\r\n    })\r\n    .option('embedSources', {\r\n        describe: 'Embed the entire contents of the Sass files in the source map',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('embedSourceMap', {\r\n        describe: 'Embed the contents of the source map file in the generated CSS',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('poll', {\r\n        describe: 'Manually check for changes to the source files at regular intervals',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('stopOnError', {\r\n        describe: 'Stop compiling immediately when an error is detected',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('noUnicode', {\r\n        describe: 'Emit ASCII characters only in error messages',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('quiet', {\r\n        alias: 'q',\r\n        describe: 'Silence warnings and status messages during compilation',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('quietDeps', {\r\n        describe: 'Silence warnings for all dependencies during compilation',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .option('fatalDeprecation', {\r\n        describe: 'Treat deprecations as errors for the specified deprecations',\r\n        type: 'array',\r\n        default: [],\r\n    })\r\n    .option('trace', {\r\n        describe: 'Show a full Ruby stack trace on error',\r\n        type: 'boolean',\r\n        default: false,\r\n    })\r\n    .argv\r\n\r\nif (checkSass() && checkTcm())\r\n    compileSassFiles(argv)\r\n"],"names":["resolve","error","resp","execSync","unlinkSync"],"mappings":"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"}