@use "sass:math";
@use "sass:meta";

/// Replace `$search` with `$replace` in `$string`
/// @author Kitty Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number)=='number'and not unitless($number) {
        // @return calc($number / calc($number * 0 + 1%));
        @return math.div($number, ($number * 0 + 1));
    }

    @return $number;
}

@function full-name($name, $v) {
    $firstChar: str-slice($v, 1, 1);

    @if $v==unset or $v==initial or $v==inherit or $v==revert or $v==revert-layer {
        @return $name+'-'+$v;
    }

    @else if ($firstChar=="0"or $firstChar=="1"or $firstChar=="2"or $firstChar=="3"or $firstChar=="4"or $firstChar=="5"or $firstChar=="6"or $firstChar=="7"or $firstChar=="8"or $firstChar=="9") {
        @return $name+'-'+$v;
    }

    @else {
        @return $v
    }
}

@function to-string($value) {
    @if type-of($value)=='number' {
        @return #{$value};
    }

    @else if type-of($value)=='string' {
        @return $value;
    }

    @else {
        @error 'Input #{$value} is no number or string';
    }
}

@function rep($value) {
    $v: $value;
    $p: '';

    @if type-of($value)=='number'and unit($value)=='%' {
        $v: strip-unit($value) + 'pct';
    }

    $v: to-string($v);
    $v: str-replace($v, '.', 'ˋ');
    $v: str-replace($v, '#', '');

    @if type-of($value)=='number' {
        $v: str-replace($v, '-', 'ˉ');

        @if $value>0 {
            $p: '-';
        }
    }

    @return $p+$v;
}


@mixin width($w) {
    .w#{rep($w)} {
        width: $w;
    }
}

@mixin min-width($w) {
    .min-w#{rep($w)} {
        min-width: $w;
    }
}

@mixin max-width($w) {
    .max-w#{rep($w)} {
        max-width: $w;
    }
}

@mixin height($h) {
    .h#{rep($h)} {
        height: $h;
    }
}

@mixin min-height($h) {
    .min-h#{rep($h)} {
        min-height: $h;
    }
}

@mixin max-height($h) {
    .max-h#{rep($h)} {
        max-height: $h;
    }
}

@mixin cursor($c) {
    .cursor-#{$c} {
        cursor: $c;
    }
}

@mixin text-align($c) {
    .text-#{$c} {
        text-align: $c;
    }
}

@mixin font-weight($c) {
    @if type-of($c)=='number' {
        .font-#{$c} {
            font-weight: $c;
        }
    }

    @else {
        .#{full-name(font-weight, $c)} {
            font-weight: $c;
        }
    }
}

@mixin text-decoration($c) {
    .#{full-name(text-decoration, $c)} {
        text-decoration: $c;
    }
}

@mixin text-transform($c) {
    .#{full-name(text-transform, $c)} {
        text-transform: $c;
    }
}

@mixin font-size($c) {
    .fs#{rep($c)} {
        font-size: $c;
    }
}

@mixin color($w) {
    //.#{rep(ie-hex-str($w))} {
    $v: rep(#{$w});

    .#{full-name(color, $v)} {
        color: $w;
    }
}

@mixin hex($w) {
    $v: rep(ie-hex-str($w));

    .#{full-name(color, $v)} {
        color: $w;
    }
}

@mixin vertical-align($v) {
    .v-#{$v} {
        vertical-align: $v;
    }
}

@mixin background($v) {
    .bg-#{$v} {
        background: $v;
    }
}


@mixin z-index($v) {
    .z#{rep($v)} {
        z-index: $v;
    }
}

@mixin position($v) {
    .#{full-name(position, $v)} {
        position: $v;
    }
}

@mixin top($v) {
    .t#{rep($v)} {
        top: $v;
    }
}

@mixin left($v) {
    .l#{rep($v)} {
        left: $v;
    }
}

@mixin right($v) {
    .r#{rep($v)} {
        right: $v;
    }
}

@mixin bottom($v) {
    .b#{rep($v)} {
        bottom: $v;
    }
}

@mixin margin($v) {
    .m#{rep($v)} {
        margin: $v;
    }
}

@mixin margin-top($v) {
    .mt#{rep($v)} {
        margin-top: $v;
    }
}

@mixin margin-bottom($v) {
    .mb#{rep($v)} {
        margin-bottom: $v;
    }
}

@mixin margin-left($v) {
    .ml#{rep($v)} {
        margin-left: $v;
    }
}

@mixin margin-right($v) {
    .mr#{rep($v)} {
        margin-right: $v;
    }
}

@mixin padding($v) {
    .p#{rep($v)} {
        padding: $v;
    }
}

@mixin padding-top($v) {
    .pt#{rep($v)} {
        padding-top: $v;
    }
}

@mixin padding-bottom($v) {
    .pb#{rep($v)} {
        padding-bottom: $v;
    }
}

@mixin padding-left($v) {
    .pl#{rep($v)} {
        padding-left: $v;
    }
}

@mixin padding-right($v) {
    .pr#{rep($v)} {
        padding-right: $v;
    }
}

@mixin border($v) {
    .border-#{$v} {
        border: $v;
    }
}

@mixin border-top($v) {
    .bt-#{$v} {
        border-top: $v;
    }
}

@mixin border-bottom($v) {
    .bb-#{$v} {
        border-bottom: $v;
    }
}

@mixin border-left($v) {
    .bl-#{$v} {
        border-left: $v;
    }
}

@mixin border-right($v) {
    .br-#{$v} {
        border-right: $v;
    }
}

@mixin display($v) {
    .#{full-name(display, $v)} {
        display: $v;
    }
}

@mixin float($v) {
    .float-#{$v} {
        float: $v;
    }
}

@mixin flex-grow($v) {
    .grow-#{$v} {
        flex-grow: $v;
    }
}

@mixin flex($v) {
    .flex-#{$v} {
        flex: $v;
    }
}

@mixin border-collapse($v) {
    .#{full-name(border-collapse, $v)} {
        border-collapse: $v;
    }
}

@mixin border-spacing($v) {
    .border-spacing-#{$v} {
        border-spacing: $v;
    }
}

@mixin letter-spacing($v) {
    .letter-spacing-#{rep($v)} {
        letter-spacing: $v;
    }
}

@mixin line-height($v) {
    .line-height-#{rep($v)} {
        line-height: $v;
    }
}